package com.example.demo.service;


import org.springframework.stereotype.Service;

import com.example.demo.dto.PlayerState;

import java.util.Collection;
import java.util.concurrent.ConcurrentHashMap;
import java.util.Map;

@Service // Spring Bean으로 등록
public class PlayerService {

 // 모든 연결된 플레이어의 상태를 저장하는 맵
 // key: player id (프론트에서 생성), value: PlayerState 객체
 private final Map<String, PlayerState> connectedPlayers = new ConcurrentHashMap<>();

 // WebSocket 세션 ID와 플레이어 ID를 매핑하는 맵 (연결 해제 시 사용)
 // key: WebSocket Session ID, value: Player ID
 private final Map<String, String> sessionToPlayerIdMap = new ConcurrentHashMap<>();

 public void addPlayer(PlayerState playerState, String sessionId) {
     connectedPlayers.put(playerState.getId(), playerState);
     sessionToPlayerIdMap.put(sessionId, playerState.getId());
 }

 public void updatePlayer(PlayerState playerState) {
     connectedPlayers.put(playerState.getId(), playerState); // 기존에 없으면 추가, 있으면 업데이트
 }

 public void removePlayerById(String playerId) {
     if (playerId != null) {
         connectedPlayers.remove(playerId);
         // sessionToPlayerIdMap에서도 제거 (역으로 찾아서)
         sessionToPlayerIdMap.entrySet().removeIf(entry -> entry.getValue().equals(playerId));
     }
 }

 public void removePlayerBySessionId(String sessionId) {
     String playerId = sessionToPlayerIdMap.remove(sessionId); // 세션 ID로 플레이어 ID 얻고 맵에서 제거
     if (playerId != null) {
         connectedPlayers.remove(playerId); // 플레이어 ID로 플레이어 상태 제거
     }
 }

 public Collection<PlayerState> getAllPlayers() {
     return connectedPlayers.values();
 }

 public PlayerState getPlayerById(String playerId) {
     return connectedPlayers.get(playerId);
 }
}