package com.example.demo.config;


import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;
//import org.springframework.security.web.csrf.CsrfTokenRequestAttributeHandler; // 필요하면 활성화
//import org.springframework.security.web.csrf.CsrfTokenRequestHandler; // 필요하면 활성화


@Configuration
@EnableWebSecurity
public class SecurityConfig {

 @Bean
 public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
     http
         // CSRF 보호 비활성화: SockJS의 HTTP 폴백 전송 방식이 CSRF 토큰을 보내지 않기 때문에 필요
         // 실제 프로덕션 환경에서는 CSRF 토큰을 클라이언트에서 웹소켓 요청에 포함시키는 방식을 고려해야 함
         .csrf(csrf -> csrf.ignoringRequestMatchers("/ws-connect/**"))
         // HTTP Basic 인증 비활성화 (기본적으로 활성화되어 있을 수 있음)
         .httpBasic(httpBasic -> httpBasic.disable())
         // 폼 로그인 비활성화 (기본적으로 활성화되어 있을 수 있음)
         .formLogin(formLogin -> formLogin.disable())
         .authorizeHttpRequests(authorize -> authorize
             // /ws-connect/** 경로로 들어오는 모든 요청 (웹소켓 연결)은 인증 없이 허용
             .requestMatchers("/ws-connect/**").permitAll()
             // 그 외 모든 요청도 현재는 허용 (개발 목적)
             // 실제 서비스에서는 여기에 인증/인가 규칙 추가: .anyRequest().authenticated()
             .anyRequest().permitAll()
         );
         // .cors(cors -> cors.disable()); // CORS 비활성화 (Vite 프록시 사용 시 필요 없을 수 있음)
         // .headers(headers -> headers.frameOptions().disable()); // H2 Console 등 사용 시 필요 (선택 사항)

     return http.build();
 }
}