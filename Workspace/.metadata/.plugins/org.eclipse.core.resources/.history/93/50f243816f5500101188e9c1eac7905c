package com.example.demo.service;

//src/main/java/com/example/threedtemppj/service/PlayerService.java

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.example.demo.dto.PlayerState;

import java.util.Collection;
import java.util.concurrent.ConcurrentHashMap;
import java.util.Map;

@Service
public class PlayerService {

 private static final Logger logger = LoggerFactory.getLogger(PlayerService.class);

 private final Map<String, PlayerState> connectedPlayers = new ConcurrentHashMap<>();
 private final Map<String, String> sessionToPlayerIdMap = new ConcurrentHashMap<>();

 public void addPlayer(PlayerState playerState, String sessionId) {
     if (playerState.getId() == null || playerState.getId().isEmpty()) {
         logger.error("Attempted to add player with null or empty ID.");
         return;
     }

     connectedPlayers.put(playerState.getId(), playerState);
     if (sessionId != null) {
         sessionToPlayerIdMap.put(sessionId, playerState.getId());
     }
     logger.debug("Player added/updated in service: {} (Session: {}). Total: {}", playerState.getId(), sessionId, connectedPlayers.size()); // 수정된 부분
 }

 public void updatePlayer(PlayerState playerState) {
     if (playerState.getId() == null || playerState.getId().isEmpty()) {
         logger.error("Attempted to update player with null or empty ID.");
         return;
     }
     connectedPlayers.put(playerState.getId(), playerState);
     logger.debug("Player state updated in service: {}. Total: {}", playerState.getId(), connectedPlayers.size()); // 수정된 부분
 }

 public void removePlayerById(String playerId) {
     if (playerId != null) {
         connectedPlayers.remove(playerId);
         sessionToPlayerIdMap.entrySet().removeIf(entry -> entry.getValue().equals(playerId));
         logger.info("Player removed by ID: {}. Remaining: {}", playerId, connectedPlayers.size()); // 이미 있었던 로그
     }
 }

 public void removePlayerBySessionId(String sessionId) {
     if (sessionId != null) {
         String playerId = sessionToPlayerIdMap.remove(sessionId);
         if (playerId != null) {
             connectedPlayers.remove(playerId);
             logger.info("Player removed by Session ID: {} (Player ID: {}). Remaining: {}", sessionId, playerId, connectedPlayers.size()); // 이미 있었던 로그
         } else {
             logger.warn("Attempted to remove non-existent player for session ID: {}", sessionId);
         }
     }
 }

 public Collection<PlayerState> getAllPlayers() {
     return connectedPlayers.values();
 }

 public PlayerState getPlayerById(String playerId) {
     return connectedPlayers.get(playerId);
 }
}