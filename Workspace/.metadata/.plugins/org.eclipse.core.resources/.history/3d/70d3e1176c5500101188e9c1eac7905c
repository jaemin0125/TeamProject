package com.example.demo.config;



import org.springframework.context.annotation.Configuration;
import org.springframework.messaging.simp.config.MessageBrokerRegistry;
import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
import org.springframework.web.socket.config.annotation.StompEndpointRegistry;
import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;
import org.springframework.web.socket.config.annotation.WebSocketTransportRegistration;


@Configuration
@EnableWebSocketMessageBroker // WebSocket 메시지 브로커를 활성화합니다.
public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {

    @Override
    public void configureMessageBroker(MessageBrokerRegistry config) {
        // "/topic"으로 시작하는 메시지는 브로커로 라우팅됩니다. (클라이언트 구독)
        config.enableSimpleBroker("/topic");
        // "/app"으로 시작하는 메시지는 메시지 매핑된 @Controller로 라우팅됩니다. (클라이언트 전송)
        config.setApplicationDestinationPrefixes("/app");
    }

    @Override
    public void registerStompEndpoints(StompEndpointRegistry registry) {
        // "/ws-connect" 엔드포인트에 STOMP 웹소켓을 등록합니다.
        // SockJS는 웹소켓을 지원하지 않는 브라우저를 위해 폴백 옵션을 제공합니다.
        registry.addEndpoint("/ws-connect")
                .setAllowedOriginPatterns("http://localhost:5173") // 중요: 프론트엔드 주소 허용
                .withSockJS(); // SockJS 사용 설정
    }

    // 메시지 처리 시 최대 버퍼 크기 등을 조정할 수 있습니다.
    @Override
    public void configureWebSocketTransport(WebSocketTransportRegistration registration) {
        registration.setMessageSizeLimit(160 * 1024); // 예시: 160KB
        registration.setSendBufferSizeLimit(512 * 1024); // 예시: 512KB
    }
}