package com.example.demo.controller;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;

// 플레이어 상태를 위한 간단한 DTO (Data Transfer Object) 클래스
// Lombok을 사용하면 @Data 애노테이션으로 Getter, Setter, toString 등을 자동 생성할 수 있습니다.
class PlayerState {
    private String id;
    private Position position;
    private double rotationY;

    // 기본 생성자 (JSON 역직렬화를 위해 필요)
    public PlayerState() {}

    public String getId() { return id; }
    public void setId(String id) { this.id = id; }
    public Position getPosition() { return position; }
    public void setPosition(Position position) { this.position = position; }
    public double getRotationY() { return rotationY; }
    public void setRotationY(double rotationY) { this.rotationY = rotationY; }

    @Override
    public String toString() {
        return "PlayerState{" +
               "id='" + id + '\'' +
               ", position=" + position +
               ", rotationY=" + rotationY +
               '}';
    }
}

class Position {
    private double x;
    private double y;
    private double z;

    // 기본 생성자 (JSON 역직렬화를 위해 필요)
    public Position() {}

    public double getX() { return x; }
    public void setX(double x) { this.x = x; }
    public double getY() { return y; }
    public void setY(double y) { this.y = y; }
    public double getZ() { return z; }
    public void setZ(double z) { this.z = z; }

    @Override
    public String toString() {
        return "Position{" +
               "x=" + x +
               ", y=" + y +
               ", z=" + z +
               '}';
    }
}


@Controller
public class WebSocketController {

    @Autowired
    private SimpMessagingTemplate messagingTemplate; // 메시지를 특정 토픽으로 보내기 위함

    // 현재 접속한 모든 플레이어의 상태를 저장하는 맵
    // key: playerId, value: PlayerState 객체
    private final Map<String, PlayerState> connectedPlayers = new ConcurrentHashMap<>();

    // 클라이언트가 '/app/registerPlayer'로 메시지를 보낼 때 호출
    // 플레이어가 처음 접속했음을 서버에 알리는 용도 (선택 사항)
    @MessageMapping("/registerPlayer")
    public void registerPlayer(PlayerState player) {
        System.out.println("Player registered: " + player.getId());
        // 초기 위치 등록 또는 로깅
        connectedPlayers.put(player.getId(), player);
        // 모든 플레이어에게 현재 접속 플레이어 목록을 다시 보낼 수도 있음 (선택 사항)
        broadcastAllPlayerPositions();
    }


    // 클라이언트가 '/app/playerMove'로 플레이어 상태를 보낼 때 호출
    @MessageMapping("/playerMove")
    public void handlePlayerMove(PlayerState playerState) {
        // System.out.println("Received player move: " + playerState.getId() + " at " + playerState.getPosition());

        // 받은 플레이어 상태를 업데이트
        connectedPlayers.put(playerState.getId(), playerState);

        // 모든 연결된 클라이언트에게 업데이트된 모든 플레이어 위치 정보를 브로드캐스트
        broadcastAllPlayerPositions();
    }

    // 모든 플레이어의 현재 위치 정보를 브로드캐스트하는 헬퍼 메서드
    private void broadcastAllPlayerPositions() {
        // connectedPlayers 맵의 모든 값을 JSON 문자열로 변환하여 전송
        messagingTemplate.convertAndSend("/topic/playerLocations", connectedPlayers);
    }
}