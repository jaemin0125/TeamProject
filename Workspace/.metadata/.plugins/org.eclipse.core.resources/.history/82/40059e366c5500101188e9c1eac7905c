package com.example.demo.controller;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.simp.SimpMessageHeaderAccessor;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

import com.example.demo.dto.PlayerState;
import com.example.demo.service.PlayerService;

@Controller
public class GameController {

 private static final Logger logger = LoggerFactory.getLogger(GameController.class);
 private final SimpMessagingTemplate messagingTemplate;
 private final PlayerService playerService; // PlayerService 주입

 public GameController(SimpMessagingTemplate messagingTemplate, PlayerService playerService) {
     this.messagingTemplate = messagingTemplate;
     this.playerService = playerService;
 }

 @GetMapping("/api/hello") // 이전에 중복되었다면 GameController에만 남겨두세요.
 public String hello() {
     logger.info("Hello from Spring Boot server (HTTP request)!");
     return "Hello from Spring Boot!";
 }

 /**
  * 플레이어가 접속 시 호출됩니다.
  * /app/registerPlayer 로 메시지가 옵니다.
  */
 @MessageMapping("/registerPlayer")
 public void registerPlayer(PlayerState playerState, SimpMessageHeaderAccessor headerAccessor) {
     String sessionId = headerAccessor.getSessionId(); // 클라이언트 WebSocket 세션 ID 가져오기
     playerState.setSessionId(sessionId); // PlayerState에 세션 ID 설정

     playerService.addPlayer(playerState, sessionId); // PlayerService를 통해 플레이어 추가
     logger.info("Player registered: {} (Session: {})", playerState.getId(), sessionId);

     // 모든 클라이언트에게 현재 접속 중인 모든 플레이어의 상태를 전송합니다.
     messagingTemplate.convertAndSend("/topic/playerLocations", playerService.getAllPlayers());
 }

 /**
  * 플레이어의 움직임 정보가 업데이트될 때 호출됩니다.
  * /app/playerMove 로 메시지가 옵니다.
  */
 @MessageMapping("/playerMove")
 public void playerMove(PlayerState playerState) {
     playerService.updatePlayer(playerState); // PlayerService를 통해 플레이어 상태 업데이트
     // logger.debug("Player moved: {}", playerState.getId());
     // 모든 클라이언트에게 현재 접속 중인 모든 플레이어의 상태를 전송합니다.
     messagingTemplate.convertAndSend("/topic/playerLocations", playerService.getAllPlayers());
 }

 /**
  * 플레이어가 접속을 해제할 때 호출됩니다. (프론트에서 명시적으로 보낼 때)
  * 실제로는 WebSocketEventListener에서 세션 종료 이벤트를 처리하는 것이 일반적입니다.
  */
 @MessageMapping("/unregisterPlayer")
 public void unregisterPlayer(PlayerState playerState) {
     playerService.removePlayerById(playerState.getId()); // PlayerService를 통해 플레이어 제거
     logger.info("Player unregistered: {}", playerState.getId());
     // 모든 클라이언트에게 업데이트된 플레이어 목록을 전송합니다.
     messagingTemplate.convertAndSend("/topic/playerLocations", playerService.getAllPlayers());
 }
}